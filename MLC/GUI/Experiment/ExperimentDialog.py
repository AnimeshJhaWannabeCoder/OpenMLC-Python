# -*- coding: utf-8 -*-

import os
import sys
sys.path.append(os.path.abspath(".") + "/../..")

from MLC.Log.log import get_gui_logger
from MLC.GUI.Autogenerated.autogenerated import Ui_Experiment
from MLC.GUI.Tables.ConfigDictTableModel import ConfigDictTableModel
from MLC.GUI.Tables.ConfigTableModel import ConfigTableModel
from MLC.Population.Population import Population
from PyQt5.QtWidgets import QDialog

logger = get_gui_logger()


class ExperimentDialog(QDialog):
    MAX_GENERATIONS = 30

    def __init__(self, parent, mlc_local, experiment_name):
        QDialog.__init__(self, parent)
        self._autogenerated_object = Ui_Experiment()
        self._autogenerated_object.setupUi(self)

        # Experiment tab parameters
        self._current_gen = 0

        # Open the experiment
        self._mlc_local = mlc_local
        self._experiment_name = experiment_name

        self._mlc_local.open_experiment(self._experiment_name)
        config = self._mlc_local.get_experiment_configuration(self._experiment_name)

        self._load_experiment_config(config)
        self._update_individuals_per_generation_list()
        self._update_experiment_info()

    def on_closed_dialog(self):
        logger.debug('[EXPERIMENT {0}] [CLOSE_DIALOG] - Executing on_closed_dialog function'.format(self._experiment_name))
        # Close the experiment
        self._mlc_local.close_experiment(self._experiment_name)
        self.close()

    def on_start_button_clicked(self):
        logger.debug('[EXPERIMENT {0}] [START_BUTTON] - Executing on_start_button_clicked function'.format(self._experiment_name))
        from_gen = int(self._autogenerated_object.from_gen_combo.currentText())
        to_gen = int(self._autogenerated_object.to_gen_combo.currentText())

        logger.info('[EXPERIMENT {0}] [START_BUTTON] - Proceed to execute experiment from Generation '
                    'N°{1} to Generation N°{2}'.format(self._experiment_name, from_gen, to_gen))
        self._mlc_local.go(self._experiment_name, to_gen, from_gen)

        self._update_individuals_per_generation_list()
        self._update_experiment_info()

    def on_prev_gen_button_clicked(self):
        logger.debug('[EXPERIMENT {0}] [PREV_GEN_BUTTON] - Executing on_prev_gen_button_clicked function'.format(self._experiment_name))
        experiment_info = self._mlc_local.get_experiment_info(self._experiment_name)
        number_of_gens = experiment_info["generations"]

        if self._current_gen > 1:
            self._current_gen -= 1

        # Refresh the gen_count_label
        gen_count_label = self._autogenerated_object.gen_count_label
        gen_count_label.setHtml("<b> Generation: {0}/{1}</b>".format(self._current_gen, number_of_gens))

    def on_next_gen_button_clicked(self):
        logger.debug('[EXPERIMENT {0}] [PREV_GEN_BUTTON] - Executing on_next_gen_button_clicked function'.format(self._experiment_name))
        experiment_info = self._mlc_local.get_experiment_info(self._experiment_name)
        number_of_gens = experiment_info["generations"]

        if self._current_gen < number_of_gens:
            self._current_gen += 1

        # Refresh the gen_count_label
        gen_count_label = self._autogenerated_object.gen_count_label
        gen_count_label.setHtml("<b> Generation: {0}/{1}</b>".format(self._current_gen, number_of_gens))

    def _update_experiment_info(self):
        # Fill the comboboxes
        experiment_info = self._mlc_local.get_experiment_info(self._experiment_name)
        from_gen_combo = self._autogenerated_object.from_gen_combo
        to_gen_combo = self._autogenerated_object.to_gen_combo
        from_gen_combo.clear()
        to_gen_combo.clear()

        number_of_gens = experiment_info["generations"]

        if number_of_gens == 0:
            from_gen_combo.addItems([str(1)])
            to_gen_combo.addItems([str(x) for x in xrange(2, ExperimentDialog.MAX_GENERATIONS)])
            self._current_gen = 1
        else:
            # FIXME: Think what to do in the border case of number_of_gens == MAX_GENERATIONS
            from_gen_combo.addItems([str(x) for x in xrange(1, number_of_gens)])
            to_gen_combo.addItems([str(x) for x in xrange(number_of_gens + 1, ExperimentDialog.MAX_GENERATIONS)])

        # Fill the db_view
        if number_of_gens != 0:
            header = ['Population Index', 'Individual Index', 'Cost', 'Value', 'Gen Method', 'Appearences']
            table_model = ConfigTableModel(self._current_gen, header, self)
            db_view = self._autogenerated_object.db_view
            db_view.setModel(table_model)
            db_view.resizeColumnsToContents()

    def _update_individuals_per_generation_list(self):
        # Clean up ye olde list
        self._individuals_per_generation = []

        experiment_info = self._mlc_local.get_experiment_info(self._experiment_name)
        number_of_gens = experiment_info["generations"]
        indivs_per_gen = experiment_info["individuals_per_generation"]

        if number_of_gens == 0:
            # Disable Experiment tab buttons
            self._autogenerated_object.prev_gen_button.setDisabled(True)
            self._autogenerated_object.next_gen_button.setDisabled(True)
            self._autogenerated_object.db_view.setDisabled(True)
            return
        else:
            self._autogenerated_object.prev_gen_button.setDisabled(False)
            self._autogenerated_object.next_gen_button.setDisabled(False)
            self._autogenerated_object.db_view.setDisabled(False)

        # Complete the list
        individuals = self._mlc_local.get_individuals(self._experiment_name)
        for index in xrange(1, number_of_gens + 1):
            gens_list = []

            generation = self._mlc_local.get_generation(self._experiment_name, index)
            pop_individuals = generation.get_individuals()
            costs = generation.get_costs()
            gen_methods = generation.get_gen_methods()

            for pop_index in xrange(1, indivs_per_gen + 1):
                indiv_index = pop_individuals[pop_index - 1] - 1
                indiv_cost = individuals[indiv_index].get_cost()
                indiv_value = individuals[indiv_index].get_value()
                indiv_appearences = individuals[indiv_index].get_appearences()
                gens_list.append([pop_index, indiv_index, indiv_cost, indiv_value, 1, indiv_appearences])

            self._individuals_per_generation.append(gens_list)

    def _load_experiment_config(self, config):
        header = ['Parameter', 'Section', 'Value']
        table_model = ConfigDictTableModel(config, header, self)

        config_table = self._autogenerated_object.config_table
        config_table.setModel(table_model)
        config_table.resizeColumnsToContents()
        config_table.setSortingEnabled(True)
        table_model.sort_by_section_in_descending_order()
