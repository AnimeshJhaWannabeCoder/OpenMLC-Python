# -*- coding: utf-8 -*-

import os
import numpy as np
import sys
sys.path.append(os.path.abspath(".") + "/../..")

from MLC.Application import MLC_CALLBACKS
from MLC.GUI.Autogenerated.autogenerated import Ui_ExperimentInProgressDialog
from MLC.Log.log import get_gui_logger
from PyQt5.QtWidgets import QDialog
from threading import Thread

logger = get_gui_logger()


class ExperimentInProgressDialog(QDialog, Thread):

    def __init__(self, mlc_local, experiment_name, to_gen, from_gen, parent=None):
        QDialog.__init__(self, parent)
        Thread.__init__(self)

        self._mlc_local = mlc_local
        self._experiment_name = experiment_name
        self._experiment_info = self._mlc_local.get_experiment_info(experiment_name)
        self._to_gen = to_gen
        self._from_gen = from_gen - 1

        self._autogenerated_object = Ui_ExperimentInProgressDialog()
        self._autogenerated_object.setupUi(self)
        self._log_prefix = '[EXPERIMENT_IN_PROGRESS]'
        self._autogenerated_object.gen_progress_bar.setValue(0)
        self._autogenerated_object.indiv_progress_bar.setValue(100)

        self._callbacks = {MLC_CALLBACKS.ON_START:          self.simulation_started,
                           MLC_CALLBACKS.ON_NEW_GENERATION: self.new_generation_created,
                           MLC_CALLBACKS.ON_EVALUATE:       self.indiv_evaluated,
                           MLC_CALLBACKS.ON_FINISH:         self.simulation_finished}

        # Progress bar counters
        self._indiv_per_gen_counter = 0
        self._total_indivs_counter = 0
        self._gen_counter = 0
        self._amount_gens = to_gen - from_gen
        self._indivs_per_gen = int(self._experiment_info["individuals_per_generation"])
        self._total_indivs = self._amount_gens * self._indivs_per_gen

    def run(self):
        logger.debug('{0} [RUN] - Executing Thread mainloop'.format(self._log_prefix))
        self.show()
        self._mlc_local.go(self._experiment_name, self._to_gen, self._from_gen, self._callbacks)

    def on_cancel_button_clicked(self):
        logger.debug('{0} [CANCEL_BUTTON] - Executing on_cancel_button_clicked function'.format(self._log_prefix))

    def indiv_evaluated(self, individual_id, cost):
        logger.debug('{0} [INDIV_EV] - Executing indiv_evaluated callback. Indiv Id: {1} - Cost: {2}'
                     .format(self._log_prefix, individual_id, cost))
        indiv_progress_bar = self._autogenerated_object.indiv_progress_bar
        gen_progress_bar = self._autogenerated_object.gen_progress_bar
        indiv_label = self._autogenerated_object.indiv_label
        gen_label = self._autogenerated_object.gen_label

        self._indiv_per_gen_counter += 1
        self._total_indivs_counter += 1
        indiv_progress_bar.setValue(int(self._indiv_per_gen_counter / self._indivs_per_gen * 100))
        indiv_progress_bar.setValue(int(self._total_indivs_counter / self._total_indivs * 100))

        gen_label.setText("<b>Generation {0}/{1}</b>".format(self._gen_counter, self._amount_gens))
        indiv_label.setText("<b>Individual {0}/{1}</b>".format(self._indiv_per_gen_counter, self._indivs_per_gen))

    def new_generation_created(self, generation_number):
        logger.debug('{0} [NEW_GEN_CREATED] - Executing new_generation_created function'.format(self._log_prefix))
        self._gen_counter = 0
        self._indiv_per_gen_counter = 0

    def simulation_started(self):
        logger.debug('{0} [SIM_STARTED] - Executing simulation_started function'.format(self._log_prefix))

    def simulation_finished(self):
        logger.debug('{0} [SIM_FINISHED] - Executing simulation_finished function'.format(self._log_prefix))
