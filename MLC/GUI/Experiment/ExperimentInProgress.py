# -*- coding: utf-8 -*-

import math
import numpy as np
import os
import sys
sys.path.append(os.path.abspath(".") + "/../..")

from MLC.Application import MLC_CALLBACKS
from MLC.GUI.Autogenerated.autogenerated import Ui_ExperimentInProgressDialog
from MLC.GUI.Experiment.QtCharts.QtChartWrapper import QtChartWrapper
from MLC.Log.log import get_gui_logger

from PyQt5.QtCore import pyqtSignal
from PyQt5.QtCore import QPointF
from PyQt5.QtGui import QFont
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QMainWindow
from PyQt5.QtWidgets import QMessageBox

from threading import Thread

logger = get_gui_logger()


class ExperimentInProgressDialog(QMainWindow):
    indiv_evaluated = pyqtSignal([int, int, int, float])
    new_generation = pyqtSignal()
    simulation_finished = pyqtSignal()

    def __init__(self, parent, parent_signal, chart_params):
        QMainWindow.__init__(self, parent)
        self._autogenerated_object = Ui_ExperimentInProgressDialog()
        self._autogenerated_object.setupUi(self)

        # Set Dialog first attributes
        self._autogenerated_object.gen_progress_bar.setValue(0)
        self._autogenerated_object.indiv_progress_bar.setValue(0)
        self._autogenerated_object.indiv_label.setText("Individual 0/0")
        self._autogenerated_object.gen_label.setText("Generation 0/0")

        self._log_prefix = '[EXPERIMENT_IN_PROGRESS]'
        self.indiv_evaluated.connect(self._update_dialog)
        self.simulation_finished.connect(self._simulation_finished)
        self.new_generation.connect(self._create_new_chart)

        # Signal to be emited when the experiment finished
        self._parent_signal = parent_signal

        # Individuals Graph data
        self._chart_params = chart_params
        self._current_generation = 1

    # FIXME: Change this for a kwargs implementation
    def add_experiment_data(self, amount_gens, indivs_per_gen):
        self._amount_gens = amount_gens
        self._indivs_per_gen = indivs_per_gen
        self._total_indivs = self._amount_gens * self._indivs_per_gen
        self._create_new_chart()

    def on_cancel_button_clicked(self):
        logger.debug('{0} [CANCEL_BUTTON] - Executing on_cancel_button_clicked function'.format(self._log_prefix))

    def _update_dialog(self, indivs_per_gen_counter, total_indivs_counter, gen_counter, cost):
        logger.debug('{0} [UPDATE_EXP_IN_PROGRESS] - Executing update_dialog function'.format(self._log_prefix))
        indiv_progress_bar = self._autogenerated_object.indiv_progress_bar
        gen_progress_bar = self._autogenerated_object.gen_progress_bar
        indiv_label = self._autogenerated_object.indiv_label
        gen_label = self._autogenerated_object.gen_label

        indiv_progress_bar.setValue(int(float(indivs_per_gen_counter) / self._indivs_per_gen * 100))
        indiv_progress_bar.valueChanged.emit(int(float(indivs_per_gen_counter) / self._indivs_per_gen * 100))
        gen_progress_bar.setValue(int(float(total_indivs_counter) / self._total_indivs * 100))
        gen_progress_bar.valueChanged.emit(int(float(total_indivs_counter) / self._total_indivs * 100))

        self._current_generation = gen_counter + 1
        gen_label.setText("<b>Generation {0}/{1}</b>".format(gen_counter + 1, self._amount_gens))
        indiv_label.setText("<b>Individual {0}/{1}</b>".format(indivs_per_gen_counter, self._indivs_per_gen))
        self._update_current_gen_experiment(indivs_per_gen_counter, cost)

    def _simulation_finished(self):
        logger.debug('{0} [SIM_FINISHED] - Executing simulation_finished function'.format(self._log_prefix))
        self._parent_signal.emit()

    def _update_current_gen_experiment(self, indiv_index, cost):
        if cost > self._chart_params["max_cost"]:
            self._indiv_chart.append_point(1, indiv_index, self._chart_params["overflow_value"])
            return

        if math.isnan(cost) or math.isinf(cost):
            self._indiv_chart.append_point(2, indiv_index, self._chart_params["nan_value"])
            return

        self._indiv_chart.append_point(0, indiv_index, cost)

    def _create_new_chart(self):
        # Insert the widget into the widget
        picture_layout = self._autogenerated_object.picture_layout

        chart_title = 'Generation {0} - Cost Per Individual'.format(self._current_generation)
        chart_font = QFont()
        chart_font.setWeight(QFont.ExtraBold)
        indiv_chart = QtChartWrapper(show_legend=True)
        indiv_chart.set_title(chart_title, chart_font)
        indiv_chart.set_object_name("indiv_chart")

        # Set the object name to be able to retrieve it later
        indiv_chart.set_xaxis(log=False, label="Individuals",
                              label_format='%i', tick_count=10)
        indiv_chart.set_yaxis(log=False, label="Costs",
                              label_format='%g', tick_count=11)
        # Blue: Valid points
        marker_size = self._chart_params["marker_size"]
        indiv_chart.add_scatter(marker_size=marker_size,
                                color=self._chart_params["valid_points_color"],
                                legend="Valid Points")
        # Red: Overflow points
        indiv_chart.add_scatter(marker_size=marker_size,
                                color=self._chart_params["overflow_color"],
                                legend="Overflow")
        # Yellow: Nan and Inf points
        indiv_chart.add_scatter(marker_size=marker_size,
                                color=self._chart_params["nan_color"],
                                legend="Nan or Inf")

        indiv_canvas = indiv_chart.get_widget()
        indiv_canvas.chart().axisX().setRange(1, self._indivs_per_gen)
        indiv_canvas.chart().axisY().setRange(self._chart_params["min_cost"],
                                              self._chart_params["max_cost"])

        # Remove all previous widgets before rendering again
        for i in reversed(range(picture_layout.count())):
            picture_layout.itemAt(i).widget().setParent(None)
        # Add the Indiv Canvas
        picture_layout.addWidget(indiv_canvas)
        self._indiv_chart = indiv_chart


class ExperimentInProgress(Thread):

    def __init__(self, mlc_local, experiment_name,
                 to_gen, from_gen, chart_params,
                 parent_signal, parent=None):
        Thread.__init__(self)

        self._mlc_local = mlc_local
        self._experiment_name = experiment_name
        self._experiment_info = self._mlc_local.get_experiment_info(experiment_name)
        self._to_gen = to_gen
        self._from_gen = from_gen - 1
        self._log_prefix = '[EXPERIMENT_IN_PROGRESS]'
        self._callbacks = {MLC_CALLBACKS.ON_START:          self.simulation_started,
                           MLC_CALLBACKS.ON_NEW_GENERATION: self.new_generation_created,
                           MLC_CALLBACKS.ON_EVALUATE:       self.indiv_evaluated,
                           MLC_CALLBACKS.ON_FINISH:         self.simulation_finished}

        # Progress bar counters
        self._indiv_per_gen_counter = 0
        self._total_indivs_counter = 0
        self._gen_counter = 0
        self._amount_gens = to_gen - from_gen + 1
        self._indivs_per_gen = int(self._experiment_info["individuals_per_generation"])
        self._experiment_signal = None

        self._dialog = ExperimentInProgressDialog(parent=parent,
                                                  parent_signal=parent_signal,
                                                  chart_params=chart_params)
        self._dialog.add_experiment_data(self._amount_gens, self._indivs_per_gen)
        self._dialog.show()

    def run(self):
        logger.debug('{0} [RUN] - Executing Thread mainloop'.format(self._log_prefix))
        self._mlc_local.go(self._experiment_name, self._to_gen, self._from_gen, self._callbacks)

    def indiv_evaluated(self, individual_id, cost):
        logger.debug('{0} [INDIV_EV] - Executing indiv_evaluated callback. Indiv Id: {1} - Cost: {2}'
                     .format(self._log_prefix, individual_id, cost))

        self._indiv_per_gen_counter += 1
        self._total_indivs_counter += 1
        self._dialog.indiv_evaluated.emit(self._indiv_per_gen_counter,
                                          self._total_indivs_counter,
                                          self._gen_counter,
                                          cost)

    def new_generation_created(self, generation_number):
        logger.debug('{0} [NEW_GEN_CREATED] - Executing new_generation_created function'.format(self._log_prefix))
        self._gen_counter += 1
        self._indiv_per_gen_counter = 0
        self._dialog.new_generation.emit()

    def simulation_started(self):
        logger.debug('{0} [SIM_STARTED] - Executing simulation_started function'.format(self._log_prefix))

    def simulation_finished(self):
        logger.debug('{0} [SIM_FINISHED] - Executing simulation_finished function'.format(self._log_prefix))
        self._dialog.simulation_finished.emit()

    def close_window(self):
        self._dialog.close()
