import os
import sys
sys.path.append(os.path.abspath(".") + "/../..")

import ConfigParser
import yaml

from MLC.api.MLCLocal import MLCLocal
from MLC.api.MLCLocal import DuplicatedExperimentError
from MLC.GUI.Autogenerated.autogenerated import Ui_MLCManager
from MLC.GUI.Autogenerated.autogenerated import Ui_PropertiesDialog
from MLC.GUI.Experiment.ExperimentDialog import ExperimentDialog
from MLC.GUI.Tables.ConfigParserTableModel import ConfigParserTableModel
from MLC.Log.log import get_gui_logger
from MLC.mlc_parameters.mlc_parameters import Config

from PyQt5.QtCore import pyqtSlot
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QIcon
from PyQt5.QtGui import QStandardItemModel
from PyQt5.QtGui import QStandardItem
from PyQt5.QtWidgets import QAbstractItemView
from PyQt5.QtWidgets import QAction
from PyQt5.QtWidgets import QApplication
from PyQt5.QtWidgets import QDialog
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtWidgets import QInputDialog
from PyQt5.QtWidgets import QMainWindow
from PyQt5.QtWidgets import QMessageBox

logger = get_gui_logger()


class MLC_GUI(QMainWindow):
    GUI_CONFIG_FILE = "./.mlc_gui.conf"
    WEBSERVICE_PORT = 5000
    DEFAULT_EXPERIMENT_CONFIG = "../../conf/configuration.ini"

    def __init__(self):
        QMainWindow.__init__(self)
        self._autogenerated_object = Ui_MLCManager()
        self._autogenerated_object.setupUi(self)

        # ConfigParser instance with the config related with the MLC Manager (not an experiment)
        self._gui_config = None
        self._experiment_list = []
        # Store the name of the element selected in the experiment_list. The experiment selected is the
        # one highlighted in the experiment_list
        self._experiment_selected = None
        # UI Equivalent to MLC_GUI. Class with the responsability of create, remove, and execute experiments
        self._mlc_local = None

        # Config file used to create new projects
        default_experiment_config = ConfigParser.ConfigParser()
        default_experiment_config.read(MLC_GUI.DEFAULT_EXPERIMENT_CONFIG)
        self._default_experiment_config = Config.to_dictionary(default_experiment_config)

    def on_new_button_clicked(self):
        logger.debug('[MLC_MANAGER] [NEW_EXPERIMENT] - New experiment button clicked')
        experiment_name = ""
        dialog_ok = False

        while True:
            experiment_name, dialog_ok = QInputDialog.getText(self, 'New Experiment',
                                                              'Enter the name of the new experiment to be created:')

            if dialog_ok:
                if experiment_name == "":
                    logger.info('[MLC_MANAGER] [NEW_EXPERIMENT] - New experiment cannot an empty string.')
                    msg_ok = QMessageBox.information(self, 'New Experiment',
                                                     'New experiment cannot be an empty string. Please, insert a valid name',
                                                     QMessageBox.Ok | QMessageBox.Cancel,
                                                     QMessageBox.Ok)

                    if msg_ok == QMessageBox.Ok:
                        continue
                    else:
                        break

                # Check if the experiment already exists
                if experiment_name in self._experiment_list:
                    msg_ok = QMessageBox.question(self, 'New Experiment',
                                                  ('The experiment name has already been taken. '
                                                   'Do you want to create a project with a different name?'),
                                                   QMessageBox.Yes | QMessageBox.No,
                                                   QMessageBox.Yes)
                    if msg_ok == QMessageBox.Yes:
                        continue
                    else:
                        break

                # A valid project name was set, create the experiment
                try:
                    self._mlc_local.new_experiment(experiment_name, self._default_experiment_config)
                except DuplicatedExperimentError:
                    logger.debug("[MLC_MANAGER] [NEW_EXPERIMENT] - Proceed to remove a experiment without one of its files")
                    self._mlc_local.delete_experiment_from_workspace(experiment_name)
                    self._mlc_local.new_experiment(experiment_name, self._default_experiment_config)

                QMessageBox.information(self, 'New Experiment',
                                        'New experiment was succesfully created')
                logger.debug('[MLC_MANAGER] [NEW_EXPERIMENT] - New experiment was succesfully created. Name: {0}'.format(experiment_name))
                self.load_project_list()
                self._update_experiment_list()
                return
            else:
                break
        logger.debug('[MLC_MANAGER] New experiment could not be created')

    def on_open_button_clicked(self):
        logger.debug("[MLC_MANAGER] [OPEN_BUTTON] - Open button clicked")
        if self._experiment_selected is None:
            logger.info("[MLC MANAGER] [OPEN_BUTTON] - No experiment was selected yet. Don't do anything")
            return

        experiment = ExperimentDialog(self, self._mlc_local, self._experiment_selected)
        experiment.show()
        experiment.exec_()

    def on_clone_button_clicked(self):
        logger.debug("[MLC_MANAGER] [CLONE_BUTTON] - Open button clicked")
        # TODO

    def on_remove_button_clicked(self):
        logger.debug("[MLC_MANAGER] [REMOVE_EXPERIMENT] - Remove button clicked")
        if self._experiment_selected is None:
            logger.info("[MLC MANAGER] [REMOVE_EXPERIMENT] - No experiment was selected yet. Don't do anything")
            return

        msg_ok = QMessageBox.question(self, 'Remove Experiment',
                                      "Do you really want to remove experiment '{0}'?.".format(self._experiment_selected),
                                       QMessageBox.Yes | QMessageBox.No,
                                       QMessageBox.No)
        if msg_ok == QMessageBox.Yes:
            workspace_dir = self._gui_config.get('MAIN', 'workspace')
            experiment_full_path = workspace_dir + '/'
            experiment_files = [self._experiment_selected + ".mlc", self._experiment_selected + ".conf"]
            errors_while_erasing = False

            # Check if the files to remove exists
            if set(experiment_files) <= set(os.listdir(workspace_dir)):
                # Try to remove the files
                try:
                    self._mlc_local.delete_experiment_from_workspace(self._experiment_selected)
                except OSError:
                    errors_while_erasing = True
                    logger.error("[MLC_MANAGER] [REMOVE_EXPERIMENT] - Experiment file {0} could not be removed".format(file))
                    QMessageBox.critical(self, 'Remove Experiment', 'Experiment file {0} could not be removed.'
                                               'Check if you have the right permissions over the files in the '
                                               'workspace folder'.format(file))
                    pass
            else:
                errors_while_erasing = True
                logger.error("[MLC_MANAGER] [REMOVE_EXPERIMENT] - Experiment {0} can't be removed. Some of the project files is missing"
                             .format(self._experiment_selected))
                QMessageBox.critical(self, 'Remove Experiment',
                                     "Experiment {0} can't be removed. Some of the project files is missing"
                                     .format(self._experiment_selected))

            if not errors_while_erasing:
                logger.info("[MLC_MANAGER] [REMOVE_EXPERIMENT] - Experiment {0} was succesfully removed".format(self._experiment_selected))
                QMessageBox.information(self, "Remove Experiment", "Experiment {0} was succesfully removed".format(self._experiment_selected))

        self.load_project_list()

    def load_gui_config(self):
        abspath = os.path.abspath(".")
        config_filepath = abspath + "/" + MLC_GUI.GUI_CONFIG_FILE

        if not os.path.isfile(config_filepath):
            reply = QMessageBox.question(self, 'Message',
                                         "Workspace has not been set yet. Do you want to set it?",
                                         QMessageBox.Yes | QMessageBox.No,
                                         QMessageBox.Yes)

            if reply == QMessageBox.Yes:
                workspace_dir = QFileDialog.getExistingDirectory(self, 'Set workspace Directory',
                                                                 '.', QFileDialog.ShowDirsOnly)
                if workspace_dir == "":
                    QMessageBox.critical(self, 'MLC Manager',
                                         'Workspace has not been set. Aborting program',
                                         QMessageBox.Ok)
                    logger.debug('[MLC_GUI] [LOAD_GUI] - Workspace was not set. Aborting program')
                    self.close()
                    sys.exit(0)
                else:
                    self._create_gui_config_from_scratch(config_filepath, workspace_dir)
                    QMessageBox.information(self, 'MLC Manager',
                                            'Workspace was succesfully set',
                                            QMessageBox.Ok)
                    logger.debug('[MLC_GUI] [LOAD_GUI] - Workspace was succesfully set: {0}'.format(workspace_dir))
            else:
                QMessageBox.critical(self, 'MLC Manager',
                                     'Workspace has not been set. Aborting program',
                                     QMessageBox.Ok)
                logger.debug('[MLC_GUI] [LOAD_GUI] - Workspace was not set. Aborting program')
                self.close()
                sys.exit(0)

        # Load GUI config
        self._gui_config = ConfigParser.ConfigParser()
        self._gui_config.read(config_filepath)
        workspace_dir = self._gui_config.get('MAIN', 'workspace')

        # Create the MLC Local instance
        self._mlc_local = MLCLocal(workspace_dir)
        logger.info('[MLC_GUI] Workspace directory: {0}'.format(self._gui_config.get('MAIN', 'workspace')))

    def _create_gui_config_from_scratch(self, config_filepath, workspace_dir):
        self._gui_config = ConfigParser.ConfigParser()
        self._gui_config.add_section('MAIN')
        self._gui_config.set('MAIN', 'workspace', workspace_dir)
        self._gui_config.add_section('WEB_SERVICE')
        self._gui_config.set('WEB_SERVICE', 'port', MLC_GUI.WEBSERVICE_PORT)
        with open(config_filepath, 'w') as cfg:
            self._gui_config.write(cfg)

    def get_gui_config(self):
        """
        This method MUST BE called after load_gui_config
        """
        return self._gui_config

    def edit_gui_config(self):
        # Create the properties Dialog with the MLC Manager Options
        dialog = QDialog()
        properties_dialog = Ui_PropertiesDialog()
        properties_dialog.setupUi(dialog)

        # Fill the TableView with the GUI Config file
        header = ['Parameter', 'Section', 'Value']
        table_model = ConfigParserTableModel(self._gui_config, header, self)
        properties_dialog.tableView.setModel(table_model)
        properties_dialog.tableView.resizeColumnsToContents()
        properties_dialog.tableView.setSortingEnabled(True)
        dialog.exec_()

    def load_project_list(self):
        # Clean the experiment list before filling it
        self._experiment_list = []

        # Find all the projects in the workspace directory
        workspace_dir = self._gui_config.get('MAIN', 'workspace')
        workspace_files = os.listdir(workspace_dir)

        # Get a list of the possible projects names
        project_names = set([x.split(".")[0] for x in workspace_files])
        logger.debug('[MLC_MANAGER] [LOAD_PROJECT_LIST] - Files in workspace directory: {0}'.format(workspace_files))
        logger.debug('[MLC_MANAGER] Possible project names: {0}'.format(project_names))

        # Now, check if every possible project name has a .mlc and .cfg file associated
        for name in project_names:
            mlc_file = name + ".mlc"
            cfg_file = name + ".conf"
            if mlc_file in workspace_files and cfg_file in workspace_files:
                logger.debug('[MLC_MANAGER] [LOAD_PROJECT_LIST] - Valid project: {0}'.format(name))
                self._experiment_list.append(name)

        logger.info('[MLC_MANAGER] [LOAD_PROJECT_LIST] - Projects in the workspace: {0}'.format(self._experiment_list))
        self._experiment_list.sort()
        self._update_experiment_list()

    def _update_experiment_list(self):
        list_view = self._autogenerated_object.experiment_list
        list_view.setEditTriggers(QAbstractItemView.NoEditTriggers)
        model = QStandardItemModel(list_view)

        for experiment in self._experiment_list:
            item = QStandardItem(experiment)
            model.appendRow(item)

        list_view.setModel(model)

    def on_experiment_list_clicked(self, model_index):
        list_view = self._autogenerated_object.experiment_list
        experiment_name = list_view.model().itemFromIndex(model_index).text()

        # FIXME: Too expensive. Open all experiments once and retrieve the information once
        self._mlc_local.open_experiment(experiment_name)
        experiment_info = self._mlc_local.get_experiment_info(experiment_name)
        self._mlc_local.close_experiment(experiment_name)

        # Store the experiment selected to operate with it later
        self._experiment_selected = experiment_name

        # Update the experiment description
        description = ""
        for key, value in experiment_info.iteritems():
            description += "<b>" + str(key) + ":</b> " + str(value) + "<br>"
        self._autogenerated_object.experiment_description.setHtml(description)


def main():
    app = QApplication(sys.argv)
    main_window = MLC_GUI()
    main_window.show()

    # Check if the workspace was already set
    main_window.load_gui_config()

    # Load the projects founded in the workspace
    main_window.load_project_list()

    # Object which manipulates MLC experiments
    # TODO: Replace this for WebService Architecture
    config = main_window.get_gui_config()

    # Init PyQt mainloop
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
