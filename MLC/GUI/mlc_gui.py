import os
import sys
sys.path.append(os.path.abspath(".") + "/../..")

import ConfigParser
import yaml
from MLC.api.mlc import MLCLocal
from MLC.GUI.Autogenerated.autogenerated import Ui_MainWindow
from MLC.GUI.Autogenerated.autogenerated import Ui_Properties_Dialog
from MLC.Log.log import get_gui_logger

from PyQt5.QtCore import QAbstractTableModel
from PyQt5.QtCore import Qt
from PyQt5.QtCore import QVariant
from PyQt5.QtGui  import QIcon
from PyQt5.QtWidgets import QAction
from PyQt5.QtWidgets import QApplication
from PyQt5.QtWidgets import QDialog
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtWidgets import QMainWindow
from PyQt5.QtWidgets import QMessageBox

logger = get_gui_logger()


class MLC_GUI(QMainWindow):
    GUI_CONFIG_FILE = "./.mlc_gui.conf"
    WEBSERVICE_PORT = 5000

    def __init__(self):
        QMainWindow.__init__(self)
        self.gui_config = None

    def on_new_button_clicked(self):
        # TODO:
        pass

    def load_gui_config(self):
        abspath = os.path.abspath(".")
        config_filepath = abspath + "/" + MLC_GUI.GUI_CONFIG_FILE
        if not os.path.isfile(config_filepath):
            reply = QMessageBox.question(self, 'Message',
                                         "Workspace has not been set yet. Do you want to set it?",
                                         QMessageBox.Yes | QMessageBox.No,
                                         QMessageBox.Yes)

            if reply == QMessageBox.Yes:
                workspace_dir = QFileDialog.getExistingDirectory(self, 'Set workspace Directory',
                                                                 '.', QFileDialog.ShowDirsOnly)
                self.create_gui_config_from_scratch(config_filepath, workspace_dir)
                logger.debug('[MLC_GUI] Workspace set: {0}'.format(workspace_dir))
            else:
                self.close()
        else:
            # Load GUI config
            self.gui_config = ConfigParser.ConfigParser()
            self.gui_config.read(config_filepath)

        logger.info('[MLC_GUI] Workspace directory: {0}'.format(self.gui_config.get('MAIN', 'workspace')))

    def create_gui_config_from_scratch(self, config_filepath, workspace_dir):
        self.gui_config = ConfigParser.ConfigParser()
        self.gui_config.add_section('MAIN')
        self.gui_config.set('MAIN', 'workspace', workspace_dir)
        self.gui_config.add_section('WEB_SERVICE')
        self.gui_config.set('WEB_SERVICE', 'port', MLC_GUI.WEBSERVICE_PORT)
        with open(config_filepath, 'w') as cfg:
            self.gui_config.write(cfg)

    def get_gui_config(self):
        """
        This method MUST BE called after load_gui_config
        """
        return self.gui_config

    def edit_gui_config(self):
        class ConfigParserTableModel(QAbstractTableModel):

            def __init__(self, config_parser, header, parent=None, *args):
                QAbstractTableModel.__init__(self, parent, *args)
                self.header = header
                self.data = self._config_parser_to_list_of_lists(config_parser)

            def _config_parser_to_list_of_lists(self, config_parser):
                data = []
                for each_section in config_parser.sections():
                    for (each_key, each_val) in config_parser.items(each_section):
                        data.append([each_key, each_section, each_val])
                return data

            def rowCount(self, parent):
                return len(self.data)

            def columnCount(self, parent):
                return len(self.data[0])

            def data(self, index, role):
                if not index.isValid():
                    return QVariant()
                elif role != Qt.DisplayRole:
                    return QVariant()
                return QVariant(self.data[index.row()][index.column()])

            def headerData(self, col, orientation, role):
                if orientation == Qt.Horizontal and role == Qt.DisplayRole:
                    return QVariant(self.header[col])

            def sort(self, Ncol, order):
                # TODO:
                pass

        # Create the properties Dialog with the MLC Manager Options
        dialog = QDialog()
        properties_dialog = Ui_Properties_Dialog()
        properties_dialog.setupUi(dialog)

        # Fill the TableView with the GUI Config file
        header = ['Parameter', 'Section', 'Value']
        table_model = ConfigParserTableModel(self.gui_config, header, self)
        properties_dialog.tableView.setModel(table_model)
        dialog.exec_()
        


if __name__ == "__main__":
    app = QApplication(sys.argv)
    main_window = MLC_GUI()
    ui = Ui_MainWindow()
    ui.setupUi(main_window)
    main_window.show()

    # Check if the workspace was already set
    main_window.load_gui_config()

    # Object which manipulates MLC experiments
    # TODO: Replace this for WebService Architecture
    config = main_window.get_gui_config()
    # mlc = MLCLocal(config.get('MAIN', 'workspace'))

    # Init PyQt mainloop
    sys.exit(app.exec_())
